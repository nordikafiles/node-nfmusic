// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CONFIG, NF_AUTH, getRequest, iced, result, sleep, __iced_deferrals, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  define("NF_AUTH_URL", "http://nf.noip.me/auth.html");

  window.playTracklistJSON = function() {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open("GET", "tracklist.json", true);
    xhr.send();
    return xhr.onload = function() {
      return pla.loadPlaylist(JSON.parse(xhr.response));
    };
  };

  window.focused = true;

  window.addEventListener("focus", function() {
    return window.focused = true;
  });

  window.addEventListener("blur", function() {
    return window.focused = false;
  });

  CONFIG = {};

  if (localStorage.getItem("config")) {
    CONFIG = JSON.parse(localStorage.getItem("config"));
  } else {
    CONFIG = {
      invertMouseWheel: {
        value: true,
        changed: false
      },
      playerVolume: {
        value: 0.7
      },
      volumeDuration: {
        value: 10
      },
      vkAccessToken: {
        value: ""
      },
      vkUserId: {
        value: ""
      }
    };
    localStorage.setItem("config", JSON.stringify(CONFIG));
  }

  CONFIG.update = function() {
    return localStorage.setItem("config", JSON.stringify(CONFIG));
  };

  setTimeout(function() {
    if (CONFIG.vkAccessToken.value === "") {
      $(".vk-container").attr("style", "transform: scale(1); opacity: 1;");
    } else {
      $(".vk-container").attr("style", "display: none");
    }
    return $(".vk-container").on("click", function() {
      return NF_AUTH();
    });
  }, 10);

  sleep = function(ms) {
    ms += new Date().getTime();
    while (new Date() < ms) {
      continue;
    }
  };

  NF_AUTH = function(callback) {
    var au;
    au = new Auth();
    au.authUrl = NF_AUTH_URL;
    return au.getToken("vk.audio", function(e) {
      if (callback !== void 0) {
        return callback.call(this, e);
      } else {
        CONFIG.vkAccessToken.value = e.vk.access_token;
        CONFIG.vkUserId.value = e.vk.user_id;
        CONFIG.update();
        return location.reload();
      }
    });
  };

  $(window).keydown(function(e) {
    if ((e.ctrlKey || e.metaKey) && e.keyCode === 79) {
      console.log(e.keyCode);
      e.preventDefault();
      return $("#fileDialog").click();
    }
  });

  $("#fileDialog").on("change", function(e) {
    var TRACK, currentNum, ea, file, numberOfFiles, qu, url, _i, _j, _len, _len1, _ref, _ref1;
    ea = [];
    qu = 0;
    numberOfFiles = 0;
    console.log(this.files);
    _ref = this.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      if (file.type === "audio/mp3" || file.type === "audio/mpeg") {
        qu++;
      }
    }
    _ref1 = this.files;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      file = _ref1[_j];
      if (file.type === "audio/mp3" || file.type === "audio/mpeg") {
        currentNum = numberOfFiles;
        TRACK = new Track;
        url = file.urn || file.name;
        ID3.loadTags(url, function() {
          var base64String, cc, reader, tags, _k, _len2, _ref2;
          tags = ID3.getAllTags(url);
          TRACK.title = tags.title || "";
          TRACK.artist = tags.artist || "";
          if (tags.picture !== void 0) {
            base64String = "";
            _ref2 = tags.picture.data;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              cc = _ref2[_k];
              base64String += String.fromCharCode(cc);
            }
            TRACK.coverArt = "data:" + tags.picture.format + ";base64," + window.btoa(base64String);
          }
          reader = new FileReader;
          reader.readAsDataURL(file);
          return reader.onload = function(e) {
            TRACK.url = e.target.result;
            ea.push(TRACK);
            qu--;
            if (qu === 0) {
              return pla.loadPlaylist(ea);
            }
          };
        }, {
          tags: ["artist", "title", "album", "year", "comment", "track", "genre", "lyrics", "picture"],
          dataReader: FileAPIReader(file)
        });
        numberOfFiles++;
      }
    }
    return console.log(ea);
  });

  getRequest = function(url, cb) {
    var xhr;
    console.log("alala");
    xhr = new XMLHttpRequest;
    xhr.open("GET", url);
    xhr.send();
    return xhr.onload = function() {
      return cb(xhr.response);
    };
  };

  (function(_this) {
    return (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        filename: "/Users/max2/Projects/node-nfmusic/public/coffee/main.coffee"
      });
      getRequest("tracklist.json", __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return result = arguments[0];
          };
        })(),
        lineno: 111
      }));
      __iced_deferrals._fulfill();
    });
  })(this)((function(_this) {
    return function() {
      console.log(result);
      return window.CONFIG = CONFIG;
    };
  })(this));

}).call(this);
